import minimalDoc from './documentTests/shared/minimalDoc.js'

/**
 * @typedef {object} MetricContent
 * @property {object} [cvss_v2]
 * @property {string} cvss_v2.version
 * @property {object} [cvss_v3]
 * @property {string} cvss_v3.version
 * @property {object} [cvss_v4]
 * @property {string} cvss_v4.version
 */

const baseTestDocument = {
  document: {
    ...minimalDoc.document,
  },
  product_tree: {
    branches: [
      {
        category: 'vendor',
        name: 'Example Company',
        branches: [
          {
            category: 'product_name',
            name: 'Product A',
            branches: [
              {
                category: 'product_version',
                name: '1.0',
                product: {
                  name: 'Product A 1.0',
                  product_id: 'CSAFPID-0001',
                },
              },
              {
                category: 'product_version',
                name: '1.1',
                product: {
                  name: 'Product A 1.1',
                  product_id: 'CSAFPID-0002',
                },
              },
            ],
          },
        ],
      },
    ],
  },
  vulnerabilities: [
    {
      cve: 'CVE-1970-0001',
      notes: [
        {
          category: 'summary',
          text: 'Vulnerability summary',
        },
      ],
      product_status: {
        known_not_affected: ['CSAFPID-0001', 'CSAFPID-0002'],
      },
      flags: [
        {
          label: 'component_not_present',
          product_ids: ['CSAFPID-0002'],
        },
      ],
    },
  ],
}

const twoFlagsDocument = {
  ...baseTestDocument,
  vulnerabilities: [
    {
      ...baseTestDocument.vulnerabilities[0],
      flags: [
        {
          label: 'inline_mitigations_already_exist',
          product_ids: ['CSAFPID-0001'],
        },
        {
          label: 'component_not_present',
          product_ids: ['CSAFPID-0002'],
        },
      ],
    },
  ],
}

const productGroupsDocument = {
  ...baseTestDocument,
  product_tree: {
    ...baseTestDocument.product_tree,
    product_groups: [
      {
        group_id: 'CSAFGID-0001',
        summary: 'Test group',
        product_ids: ['CSAFPID-0001', 'CSAFPID-0002'],
      },
    ],
  },
  vulnerabilities: [
    {
      ...baseTestDocument.vulnerabilities[0],
      flags: [
        {
          label: 'component_not_present',
          group_ids: ['CSAFGID-0001'],
        },
      ],
    },
  ],
}

const multipleFlagsPerProductDocument = {
  ...productGroupsDocument,
  vulnerabilities: [
    {
      ...baseTestDocument.vulnerabilities[0],
      flags: [
        {
          label: 'component_not_present',
          group_ids: ['CSAFGID-0001'],
        },
        {
          label: 'vulnerable_code_not_present',
          product_ids: ['CSAFPID-0001'],
        },
      ],
    },
  ],
}

export const testDocuments = {
  baseTestDocument,
  twoFlagsDocument,
  productGroupsDocument,
  multipleFlagsPerProductDocument,
}

/**
 * @param {MetricContent} content
 * @param {string[]} products
 */
export function createVulnerabilities(content, products) {
  return {
    vulnerabilities: [
      {
        metrics: [
          {
            content: content,
            products: products,
          },
        ],
      },
    ],
  }
}

/**
 * @param {number} baseScore
 * @param {string} baseSeverity
 * @param {string} vectorString
 */
export function createCvss40(baseScore, baseSeverity, vectorString) {
  return {
    cvss_v4: {
      version: '4.0',
      vectorString: vectorString,
      baseScore: baseScore,
      baseSeverity: baseSeverity,
    },
  }
}

/**
 * @param {number} baseScore
 * @param {string} baseSeverity
 * @param {string} vectorString
 */
export function createCvss31(baseScore, baseSeverity, vectorString) {
  return {
    cvss_v3: {
      version: '3.1',
      vectorString: vectorString,
      baseScore: baseScore,
      baseSeverity: baseSeverity,
    },
  }
}
